<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- contextConfigLocation
		설정 xml 문서를 로딩 시 문서의 경로를 작성하기 위한 것이다.
		
		classpath:  의 위치
		프로젝트명/src/main/java/  -> 자바소스코드
		프로젝트명/src/main/resources/  -> 스프링 설정파일 
		
		클래스 패스 내의 소스 폴더 위치  classpath:/*/....xml, classpath:/**/....xml
		
		만약 경로가 root-context.xml이 하나의 폴더 안에 들어있는경우
		classpath:/*/root-context.xml
		모든 폴더 안에 들어있는 root-context.xml을 찾는 경우
		classpath:/**/root-context.xml
	 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:root-context.xml
		/WEB-INF/spring/spring-security.xml
		</param-value>		
	</context-param>

	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<!-- ContextLoaderListener : web.xml 문서 중에서 가장 먼저 읽어 들어야 할 Listener
		ContextLoaderListener : web.xml 내부에 읽어 들여야 할 xml 문서들 중 가장 먼저, pre loading(가장 먼저 읽어들여져야 하는) 되어야 하는 xml 문서를 읽기  위한 리스너
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<!-- DispatcherServlet : 스프링에서 제공, 사용자의 요청을 받아주는 용도의 객체로 아래의 경로를 읽어들여서 IoC 컨테이너를 생성 
		servlet-context.xml : DispatcherServlet 객체 생성 시 읽어들여질 문서로 각 요청에 처리하는 컨트롤러를  지정하는 핸들러 매핑과
							   요청 처리 후 뷰를 지정하는 뷰 리졸버 정보들을 저장하고 있는(설정하고 있는) xml 문서
		web.xml -> servlet-context.xml 순서
	-->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml
			WEB-INF/spring/appServlet/aspect-context.xml
			</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 인코딩 : 스프링에서 제공해주는 인코딩 필터 사용 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	<!-- 필터도 매핑이 필요한다. -->
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern> <!-- 들어오는 모든 요청 -->
	</filter-mapping>
	
	<!-- 에러 코드별 에러 페이지 -->
	<!-- dispathcher servlet으로 넘어가기 전에 에러페이지를 띄워준다. -->
	<error-page>
		<error-code>404</error-code>
		<location>/WEB-INF/views/common/errorPageFilter.jsp</location>
	</error-page>
	<!-- 서버까지 가기 전 에러 -->
	<error-page>
		<error-code>500</error-code>
		<location>/WEB-INF/views/common/errorPageFilter.jsp</location>
	</error-page>
	
	<!-- 서버로 들어가서 나는 에러 -->
	<!-- error-code보다 exception-type의 우선순위가 더 높다. -->
	<!-- 들어오는 모든 exception을 받겠다. -->
	<!-- 
	<error-page>
		<exception-type>java.lang.Exception</exception-type> 
		<location>/WEB-INF/views/common/errorPage.jsp</location>
	</error-page>
	 -->
</web-app>
